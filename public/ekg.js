var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");
ctx.fillStyle = "#dbbd7a";
ctx.fill();

var fps = 60;
var n = 1;
var trails = [];  // Çizgi izlerini saklamak için dizi

// DII derivasyonu verisi
var sinusRitmi = [
    // P dalga
    0, 0, 0, 0, 0, 0, 0, 0, -3, -6, -7, -8, -7, -6, -3, 0, 0, 0, 0, 0, 0,
    // QRS dalga
    0, 0, 0, 0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 0, 0, 0, 0,
    0, 0, 0, 0, 0,

    // P dalga
    0, 0, 0, 0, 0, 0, 0, 0, -3, -6, -7, -8, -7, -6, -3, 0, 0, 0, 0, 0, 0,
    // QRS dalga
    0, 0, 0, 0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 0, 0, 0, 0,
    0, 0, 0, 0, 0,

    // P dalga
    0, 0, 0, 0, 0, 0, 0, 0, -3, -6, -7, -8, -7, -6, -3, 0, 0, 0, 0, 0, 0,
    // QRS dalga
    0, 0, 0, 0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 0, 0, 0, 0,
    0, 0, 0, 0, 0,

    // P dalga
    0, 0, 0, 0, 0, 0, 0, 0, -3, -6, -7, -8, -7, -6, -3, 0, 0, 0, 0, 0, 0,
    // QRS dalga
    0, 0, 0, 0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 0, 0, 0, 0,
    0, 0, 0, 0, 0,

    // P dalga
    0, 0, 0, 0, 0, 0, 0, 0, -3, -6, -7, -8, -7, -6, -3, 0, 0, 0, 0, 0, 0,
    // QRS dalga
    0, 0, 0, 0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
];
var atrialFibrillation = [
    // Düzensiz P dalga (AF)
    -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1,
    // QRS dalga
    0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 0,

    // Düzensiz P dalga (AF)
    1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1,
    // QRS dalga
    0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1,

    // Düzensiz P dalga (AF)
    -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1,
    // QRS dalga
    0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 0, 0, 0, 0,
    0, 0, 0, 0, 0,

    // Düzensiz P dalga (AF)
    1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1,
    // QRS dalga
    0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1,

    // Düzensiz P dalga (AF)
    1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1,
    // QRS dalga
    0, -4, -6, -8, -25, -50, -16, 16, 50, 25,
    12, 8, 4, 3, 2, 1,
    // T dalga
    0, -1,
    -2, -2, -4, -8, -8, -10, -10, -10, -10, -10, -10, -10, -8, -8, -4, -2, -2, 0, 0, 0, 0,
    0, 0, 0, 0, 0
];
var VT = [
    // VT (Ventriküler Taþikardi) simülasyonu
    0,
    -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,
    -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,
    -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,
    -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,
    -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,
    -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,
    -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0,
];
var VF = [
    // VF (Ventriküler Fibrilasyon) simülasyonu
    0,
    -5, 10, -15, 20, -25, 30, -35, 40, -45, 50, -50, 45, -40, 35, -30, 25, -20, 15, -10, 5,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -5, 10, -15, 20, -25, 30, -35, 40, -45, 50, -50, 45, -40, 35, -30, 25, -20, 15, -10, 5,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -5, 10, -15, 20, -25, 30, -35, 40, -45, 50, -50, 45, -40, 35, -30, 25, -20, 15, -10, 5,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -5, 10, -15, 20, -25, 30, -35, 40, -45, 50, -50, 45, -40, 35, -30, 25, -20, 15, -10, 5,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
var polimorfikVT = [
    0, -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,

    0, -20, -30, -35, -40, -40, -40, -40, -40, -40, -40, -40, -40, -35, -30, -20, 0,
    15, 20, 30, 40, 40, 40, 40, 40, 40, 30, 20, 10, 0,
    0, 0,

    0, -10, -20, -25, -30, -30, -30, -30, -30, -30, -30, -30, -30, -25, -20, -10, 0,
    05, 10, 20, 30, 30, 30, 30, 30, 30, 20, 10, 05, 0,
    0, 0,

    0, -0, -10, -15, -20, -20, -20, -20, -20, -20, -20, -20, -20, -15, -10, -0, 0,
    00, 0, 10, 20, 20, 20, 20, 20, 20, 10, 0, 0, 0,
    0, 0,

    0, -10, -20, -25, -30, -30, -30, -30, -30, -30, -30, -30, -30, -25, -20, -10, 0,
    05, 10, 20, 30, 30, 30, 30, 30, 30, 20, 10, 05, 0,
    0, 0,

    0, -20, -30, -35, -40, -40, -40, -40, -40, -40, -40, -40, -40, -35, -30, -20, 0,
    15, 20, 30, 40, 40, 40, 40, 40, 40, 30, 20, 10, 0,
    0, 0,
    0, -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,

    0, -20, -30, -35, -40, -40, -40, -40, -40, -40, -40, -40, -40, -35, -30, -20, 0,
    15, 20, 30, 40, 40, 40, 40, 40, 40, 30, 20, 10, 0,
    0, 0,

    0, -10, -20, -25, -30, -30, -30, -30, -30, -30, -30, -30, -30, -25, -20, -10, 0,
    05, 10, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 20, 10, 05, 0,
    0, 0,

    0, -0, -10, -15, -20, -20, -20, -20, -20, -20, -20, -20, -20, -15, -10, -0, 0,
    00, 0, 10, 20, 20, 20, 20, 20, 20, 10, 0, 0, 0,
    0, 0,

    0, -10, -20, -25, -30, -30, -30, -30, -30, -30, -30, -30, -30, -25, -20, -10, 0,
    05, 10, 20, 30, 30, 30, 30, 30, 30, 20, 10, 05, 0,
    0, 0,

    0, -20, -30, -35, -40, -40, -40, -40, -40, -40, -40, -40, -40, -35, -30, -20, 0,
    15, 20, 30, 40, 40, 40, 40, 40, 40, 30, 20, 10, 0,
    0, 0,
    0, -30, -40, -45, -50, -50, -50, -50, -50, -50, -50, -50, -50, -45, -40, -30, 0,
    20, 30, 40, 50, 50, 50, 50, 50, 50, 40, 30, 20, 0,
    0, 0,
];
var stemi = [
    // P dalga
    1, -1, 0, -1, 0, -3, -5, -6, -8, -8, -7, -7, -5, -4, -3, -2, -1,
    // QRS dalga
    0, 1, 2, 3, 4, 6, 8, 10, -16, -50, -25,
    -20,
    // ST yükselmesi (daha uzun ve daha belirgin)
    -18, -19, -20, -21, -22, -24, -25, -26, -28, -30, -32, -32, -33, -33, -34,
    -35, -36, -40, -40, -40, -40, -40, -40, -40, -38, -37, -37, -36, -35, -28, -25,
    -20, -18, -15, -10, -5, 0,
    // T dalga
    0, 1, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 1, -1,
    // P dalga
    1, -1, 0, -1, 0, -3, -5, -6, -8, -8, -7, -7, -5, -4, -3, -2, -1,
    // QRS dalga
    0, 1, 2, 3, 4, 6, 8, 10, -16, -50, -25,
    -20,
    // ST yükselmesi (daha uzun ve daha belirgin)
    -18, -19, -20, -21, -22, -24, -25, -26, -28, -30, -32, -32, -33, -33, -34,
    -35, -36, -40, -40, -40, -40, -40, -40, -40, -38, -37, -37, -36, -35, -28, -25,
    -20, -18, -15, -10, -5, 0,
    // T dalga
    0, 1, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 1, -1,
    // P dalga
    1, -1, 0, -1, 0, -3, -5, -6, -8, -8, -7, -7, -5, -4, -3, -2, -1,
    // QRS dalga
    0, 1, 2, 3, 4, 6, 8, 10, -16, -50, -25,
    -20,
    // ST yükselmesi (daha uzun ve daha belirgin)
    -18, -19, -20, -21, -22, -24, -25, -26, -28, -30, -32, -32, -33, -33, -34,
    -35, -36, -40, -40, -40, -40, -40, -40, -40, -38, -37, -37, -36, -35, -28, -25,
    -20, -18, -15, -10, -5, 0,
    // T dalga
    0, 1, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 1, -1,
    // P dalga
    1, -1, 0, -1, 0, -3, -5, -6, -8, -8, -7, -7, -5, -4, -3, -2, -1,
    // QRS dalga
    0, 1, 2, 3, 4, 6, 8, 10, -16, -50, -25,
    -20,
    // ST yükselmesi (daha uzun ve daha belirgin)
    -18, -19, -20, -21, -22, -24, -25, -26, -28, -30, -32, -32, -33, -33, -34,
    -35, -36, -40, -40, -40, -40, -40, -40, -40, -38, -37, -37, -36, -35, -28, -25,
    -20, -18, -15, -10, -5, 0,
    // T dalga
    0, 1, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 1, -1,




];
var stop = [];


var data = [];

// VF (Ventriküler Fibrilasyon) simülasyonu
for (var i = 0; i < 400; i++) {
    var randomValue = Math.random() * 80 - 40; // Rastgele deðerlerle daha kaba bir dalga oluþtur
    data.push(randomValue);
}

// VF simülasyonu sona erdiðinde sýfýrla
data.push(0);



var canvasWidth = canvas.width;
var canvasHeight = canvas.height;
var maxTrails = 50;
// Ýzlerin maksimum sayýsý

function drawWave() {
    requestAnimationFrame(function () {
        ctx.clearRect(0, 0, canvasWidth, canvasHeight);
        ctx.lineWidth = "1";
        ctx.strokeStyle = 'green';

        // Canvas üzerindeki dalga çizgisi
        ctx.beginPath();
        ctx.moveTo(0, data[0] + canvasHeight / 2);

        // Her iki nokta arasýnda çizgi oluþtur
        for (var i = 1; i < n; i++) {
            ctx.lineTo(i, data[i] + canvasHeight / 2);
        }
        ctx.stroke();

        // Çizgi izlerini sakla
        trails.push({ x: n, y: data[n] + canvasHeight / 2 });

        // Ýzleri çiz
        ctx.globalAlpha = 0.5;
        ctx.lineWidth = "3";

        // Ýzlerin sayýsý bir sýnýrdan fazla ise eski izleri temizle
        if (trails.length > maxTrails) {
            trails.shift(); // Ýlk izi kaldýr
        }

        for (var i = 0; i < trails.length; i++) {
            ctx.beginPath();
            ctx.moveTo(trails[i].x - 1, trails[i].y);
            ctx.lineTo(trails[i].x, trails[i].y);
            ctx.stroke();
        }
        ctx.globalAlpha = 1;

        // Parlak yeþil nokta çizimi
        var radius = 2;
        ctx.fillStyle = 'lime';
        ctx.beginPath();
        ctx.arc(n, data[n] + canvasHeight / 2, radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.shadowColor = 'rgba(0, 255, 0, 0.6)';
        ctx.shadowBlur = 10;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;

        // Defibrilatör ekraný gibi ýzgara çizimi
        ctx.lineWidth = "0.5";
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
        for (var i = 0; i < canvasWidth; i += 10) {
            ctx.beginPath();
            ctx.moveTo(i, 0);
            ctx.lineTo(i, canvasHeight);
            ctx.stroke();
        }
        for (var j = 0; j < canvasHeight; j += 10) {
            ctx.beginPath();
            ctx.moveTo(0, j);
            ctx.lineTo(canvasWidth, j);
            ctx.stroke();
        }

        n += 1;
        if (n >= data.length) {
            n = 1;
            trails = [];
        }

        // Animasyonu sürdür
        setTimeout(drawWave, 500 / fps);
    });
}

function ekgCiz(ritim) {
    const patientId = document.getElementById("patientId").value;
    /*
    fetch(`/getVitalResult/${patientId}/${ritim}`)
        .then(response => response.json())
        .then(result => {
            // Daha önce seçilen testleri güncelle

            data = getVitalResult(result);
            drawWave();
        })
        .catch(error => console.error('Error:', error));
        */
    data = getVitalResult(ritim);
    drawWave();
}

function getVitalResult(ritimTuru) {
    // Burada ritim türüne göre uygun veriyi çek ve döndür
    if (ritimTuru === "sinus") {
        // Sinus ritmi verisi çekme iþlemi
        return sinusRitmi;
    } else if (ritimTuru === "af") {
        // Atrial fibrillation verisi çekme iþlemi
        return atrialFibrillation;
    } else if (ritimTuru === "stop") {
        // Atrial fibrillation verisi çekme iþlemi
        return stop;
    } else {
        // Bilinmeyen ritim türü durumu
        console.error("Bilinmeyen ritim türü: ", ritimTuru);
        return sinusRitmi;
    }
}
